<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.19">

    
  <!-- Spot Style - Default Point Spot Style -->
  <style name="IconDefaultPointSpotStyle"
         url="%FIRSTXML%/spots/hotspot_image_sequence_user_defaultpoint0.png"
         visible="false"
         frame="0"
         lastframe="22"
         framewidth="50"
         frameheight="50"
         stopspotsequence="false"
         crop="0|0|50|50"
         onloaded="startspotanimation(0.1);"
         onhover="onhoverIconDefaultPointSpotStyle"
         onover="onoverIconDefaultPointSpotStyle"
         onout="onoutIconDefaultPointSpotStyle"

         height="20"
         width="20"
         />

  <action name="onhoverIconDefaultPointSpotStyle">
    showtooltip('hotspot');
  </action>

  <action name="onoverIconDefaultPointSpotStyle">


pauseautorotation(forcehotspot);

  </action>

  <action name="onoutIconDefaultPointSpotStyle">
    hideTooltip();


resumeautorotation(forcehotspot);

  </action>



<!-- ********** -->
<!-- WebVR Button -->
<!-- id : webvrbutton -->
<!-- ********** -->

	<layer name="webvrbutton"
		keep="true"
		blocked="false"
		alpha="0.50000762951094835"
		url="%FIRSTXML%/graphics/webvrbutton/btn_webvr.png" 
		align="bottomright"
		x="10"
		y="10"
		zorder="1"
		visible="false"
		onclick="js(accessWebVr());
"
		tooltip="webvrbuttontooltip"
		onhover="showTooltip('plugin');"
		onout="hideTooltip();"

		crop="0|0|100|63"
		/>

	<events name="webvrbuttonevents"
		onvrunavailable="hidewebvrbutton(true);"
		onTourStart="showwebvrbutton();"
		hidetourcontrols="hidewebvrbutton();" 
		showtourcontrols="showwebvrbutton();" 
		keep="true" />
	<action name="hidewebvrbutton">if(%1 == true,set(layer[webvrbutton].blocked, true););set(layer[webvrbutton].visible, false);</action>
	<action name="showwebvrbutton">if(tour_displaycontrols,if(layer[webvrbutton].blocked == false,set(layer[webvrbutton].visible, true););,hidewebvrbutton(););</action>


<!-- ********** -->
<!-- D-pad Control Bar -->
<!-- id : controlBar_dpad -->
<!-- ********** -->

<krpano controlBar_dpadbarbuilt="false" controlBar_dpadhorizontalwidth="0" controlBar_dpadverticalheight="0" controlBar_dpadIsOpened="false" />

<events name="controlBar_dpadevents" 
	onxmlcomplete="controlBar_dpadbuildMenuBar();" 

	openvideointerface="controlBar_dpadHideControlBar();"
	closevideointerface="controlBar_dpadShowControlBar();"

	keep="true" />


<action name="controlBar_dpadHideControlBar">
	set(layer[controlBar_dpadmenu_vertical_bg].visible, false);
	set(layer[controlBar_dpadmenu_vertical_bg_border].visible, false);
	set(layer[controlBar_dpadmenu_horizontal_bg].visible, false);
	set(layer[controlBar_dpadmenu_horizontal_bg_border].visible, false);
	set(layer[controlBar_dpadnavigation_bg_border].visible, false);
	set(layer[controlBar_dpadnavigation_bg].visible, false);
	set(layer[controlBar_dpadnavigation_bg_border].alpha, 0.5);
</action>
<action name="controlBar_dpadShowControlBar">
	if(controlBar_dpadIsOpened,
		set(layer[controlBar_dpadmenu_vertical_bg].visible, true);
		set(layer[controlBar_dpadmenu_vertical_bg_border].visible, true);
		set(layer[controlBar_dpadmenu_horizontal_bg].visible, true);
		set(layer[controlBar_dpadmenu_horizontal_bg_border].visible, true);
	);
	set(layer[controlBar_dpadnavigation_bg].visible, true);
	set(layer[controlBar_dpadnavigation_bg_border].visible, true);
	set(layer[controlBar_dpadnavigation_bg_border].alpha, 1);
</action>

<action name="controlBar_dpadbuildMenuBar">
	ifnot (controlBar_dpadbarbuilt, controlBar_dpadbuildMenu(); set(controlBar_dpadbarbuilt, true););
</action>

<action name="controlBar_dpadbuildMenu">
	
	
	
	set(controlBar_dpadbutton_pos, 10);


	if(plugin[ptpvrmode] AND device.html5,
		set(layer[controlBar_dpadbtn_enter_vr].y, get(controlBar_dpadbutton_pos));
		set(layer[controlBar_dpadbtn_enter_vr_not].y, get(controlBar_dpadbutton_pos));
		inc(controlBar_dpadbutton_pos, 40);
	);


		if (device.fullscreensupport,
			set(layer[controlBar_dpadbtn_openfs].y, get(controlBar_dpadbutton_pos));
			set(layer[controlBar_dpadbtn_closefs].y, get(controlBar_dpadbutton_pos));
			inc(controlBar_dpadbutton_pos, 40);
		);
	
		if (device.desktop,
			set(layer[controlBar_dpadbtn_ctrlmode_drag_to].y, get(controlBar_dpadbutton_pos));
			set(layer[controlBar_dpadbtn_ctrlmode_move_to].y, get(controlBar_dpadbutton_pos));
			inc(controlBar_dpadbutton_pos, 40);
		);
	


	
		if (device.desktop,
			set(layer[controlBar_dpadbtn_out].y, get(controlBar_dpadbutton_pos));
			inc(controlBar_dpadbutton_pos, 40);
				set(layer[controlBar_dpadzoom_slider_bg].y, get(controlBar_dpadbutton_pos));
				inc(controlBar_dpadbutton_pos, 70);
			set(layer[controlBar_dpadbtn_in].y, get(controlBar_dpadbutton_pos));
			inc(controlBar_dpadbutton_pos, 40);
		);
	
		set(layer[controlBar_dpadbtn_autorotate_on ].y, get(controlBar_dpadbutton_pos));
		set(layer[controlBar_dpadbtn_autorotate_off].y, get(controlBar_dpadbutton_pos));
		inc(controlBar_dpadbutton_pos, 40);
	

		set(layer[controlBar_dpadbtn_autotour_on ].y, get(controlBar_dpadbutton_pos));
		set(layer[controlBar_dpadbtn_autotour_off].y, get(controlBar_dpadbutton_pos));
		inc(controlBar_dpadbutton_pos, 40);
	

	
	if (controlBar_dpadbutton_pos != 10,
		set(layer[controlBar_dpadmenu_vertical_bg].height, get(controlBar_dpadbutton_pos));
		set(layer[controlBar_dpadmenu_vertical_bg_border].height, get(controlBar_dpadbutton_pos));
		set(controlBar_dpadverticalheight, get(controlBar_dpadbutton_pos));


	,
		set(layer[controlBar_dpadmenu_vertical_bg].height, 0);
		set(layer[controlBar_dpadmenu_vertical_bg_border].height, 0);


	);
	
	
	
	set(controlBar_dpadbutton_pos, 10);
	
		set(layer[controlBar_dpadbtn_home].x, get(controlBar_dpadbutton_pos));
		inc(controlBar_dpadbutton_pos, 40);
	
		if (scene.count GT 1,
			set(layer[controlBar_dpadbtn_prev_pano].x, get(controlBar_dpadbutton_pos));
			inc(controlBar_dpadbutton_pos, 40);
			
			set(layer[controlBar_dpadbtn_next_pano].x, get(controlBar_dpadbutton_pos));
			inc(controlBar_dpadbutton_pos, 40);
		);
	

		set(layer[controlBar_dpadbtn_sound_off].x, get(controlBar_dpadbutton_pos));
		set(layer[controlBar_dpadbtn_sound_on ].x, get(controlBar_dpadbutton_pos));
		inc(controlBar_dpadbutton_pos, 40);
		set(layer[controlBar_dpadVolumeBarContainer].x, get(controlBar_dpadbutton_pos));
		inc(controlBar_dpadbutton_pos, get(layer[controlBar_dpadVolumeBarContainer].width));
		inc(controlBar_dpadbutton_pos, 10);

	
	
	

	
	
	

	
	
	if (controlBar_dpadbutton_pos != 10,
		set(layer[controlBar_dpadmenu_horizontal_bg].width, get(controlBar_dpadbutton_pos));
		set(layer[controlBar_dpadmenu_horizontal_bg_border].width, get(controlBar_dpadbutton_pos));
		set(controlBar_dpadhorizontalwidth, get(controlBar_dpadbutton_pos));
	,
		set(layer[controlBar_dpadmenu_horizontal_bg].width, 0);
	);
	
	
	
	
	controlBar_dpadSetVolumeBarOffsetX();
</action>


<events name="controlBar_dpadStartTourEvents" onTourStart="controlBar_dpadCallOnStartTour();" keep="true" />

<action name="controlBar_dpadCallOnStartTour">
	
	controlBar_dpadshowMenuControls();
</action>


	<action name="controlBar_dpadSetVolumeBarOffsetX">
		
		
		add(volumeBarPosX, get(layer[controlBar_dpadVolumeBarContainer].x), get(layer[get(layer[controlBar_dpadVolumeBarContainer].parent)].x));
		
		set(layer[controlBar_dpadVolumeBarContainer].xoffset, get(volumeBarPosX));
		
		controlBar_dpadSetupVolumeBar();
	</action>
		
	
	<action name="controlBar_dpadSetupVolumeBar">
		controlBar_dpadCalculateSegmentWidth();
		
		for(set(volumei,0), volumei LT layer[controlBar_dpadVolumeBarContainer].segmentCount, inc(volumei), 
			controlBar_dpadCreateVolumeSegment(get(volumei));
		);
	</action>
	
	<action name="controlBar_dpadCalculateSegmentWidth">
		sub(layer[controlBar_dpadVolumeBarContainer].intervalCount, get(layer[controlBar_dpadVolumeBarContainer].segmentCount), 1);
		
		mul(totalIntervalWidth, get(layer[controlBar_dpadVolumeBarContainer].intervalWidth), get(layer[controlBar_dpadVolumeBarContainer].intervalCount));
		
		sub(totalSegmentWidth, get(layer[controlBar_dpadVolumeBarContainer].width), get(totalIntervalWidth));
		
		div(layer[controlBar_dpadVolumeBarContainer].segmentWidth, get(totalSegmentWidth), get(layer[controlBar_dpadVolumeBarContainer].segmentCount));
		
		add(layer[controlBar_dpadVolumeBarContainer].incrementPosX, get(layer[controlBar_dpadVolumeBarContainer].segmentWidth), get(layer[controlBar_dpadVolumeBarContainer].intervalWidth));
		
		div(layer[controlBar_dpadVolumeBarContainer].incrementHeight, get(layer[controlBar_dpadVolumeBarContainer].height), get(layer[controlBar_dpadVolumeBarContainer].segmentCount));
	</action>
	
	<action name="controlBar_dpadCreateVolumeSegment">
		set(volumeSegmentName, 'volumeSegment_');
		txtadd(volumeSegmentName, %1);
		
		mul(posX, get(layer[controlBar_dpadVolumeBarContainer].incrementPosX), %1);
		
		mul(segmentHeight, get(layer[controlBar_dpadVolumeBarContainer].incrementHeight), %1);
		add(segmentHeight, get(layer[controlBar_dpadVolumeBarContainer].incrementHeight));
		
		addlayer(get(volumeSegmentName));
		set(layer[get(volumeSegmentName)].keep, true);
		set(layer[get(volumeSegmentName)].type, container);
		set(layer[get(volumeSegmentName)].align, bottomleft);
		set(layer[get(volumeSegmentName)].parent, controlBar_dpadVolumeBarContainer);
		set(layer[get(volumeSegmentName)].x, get(posX));
		set(layer[get(volumeSegmentName)].width, get(layer[controlBar_dpadVolumeBarContainer].segmentWidth));
		set(layer[get(volumeSegmentName)].height, get(segmentHeight));
		
		set(layer[get(volumeSegmentName)].bgcolor, get(layer[controlBar_dpadVolumeBarContainer].lightColor));
		set(layer[get(volumeSegmentName)].bgalpha, 1);
	</action>
	
	<action name="controlBar_dpadAdjustHighlightToVolume">
		mul(segmentToHighlight, %1, get(layer[controlBar_dpadVolumeBarContainer].segmentCount));
		div(segmentToHighlight, 100);
		Math.ceil(segmentToHighlight); 
		
		for(set(volumej,0), volumej LT layer[controlBar_dpadVolumeBarContainer].segmentCount, inc(volumej), 
			set(volumeSegmentName, 'volumeSegment_');
			txtadd(volumeSegmentName, get(volumej));
			
			if(volumej LT segmentToHighlight,
				set(layer[get(volumeSegmentName)].bgcolor, get(layer[controlBar_dpadVolumeBarContainer].lightColor));
				set(layer[get(volumeSegmentName)].bgalpha, 1.0);
			,
				set(layer[get(volumeSegmentName)].bgcolor, get(layer[controlBar_dpadVolumeBarContainer].darkColor));
				set(layer[get(volumeSegmentName)].bgalpha, 0.4);
			);
		);
	</action>
	
	<action name="controlBar_dpadVolumeBarClickHandler">
		if(false,
			
			sub(localPosX, stagewidth, get(layer[controlBar_dpadVolumeBarContainer].xoffset));
			sub(localPosX, mouse.stagex);
			sub(localX, get(layer[controlBar_dpadVolumeBarContainer].width), get(localPosX));
		,
			
			sub(localX, mouse.stagex, get(layer[controlBar_dpadVolumeBarContainer].xoffset));
		);
		
		mul(percent, get(localX), 100);
		div(percent, get(layer[controlBar_dpadVolumeBarContainer].width));
		Math.ceil(percent);
		
		
		setTourSoundsVolume(get(percent));
		
		
		if(tour_soundson == false,
			playTourSounds();
		);
		
		controlBar_dpadAdjustHighlightToVolume(get(percent));
	</action>
	


<style name="controlBar_dpadbtn_vertical_style"
	keep="true"
	align="bottom"
	onhover="controlBar_dpadshowVerticalMenuTooltip();"
	onout="hideTooltip();"
	crop="0|0|30|30"
	onovercrop="0|30|30|30"
	ondowncrop="0|60|30|30"
	x="0"
	/>
<style name="controlBar_dpadbtn_vertical_style_off"
	keep="true"
	align="bottom"
	onhover="controlBar_dpadshowVerticalMenuTooltip();"
	onout="hideTooltip();"
	x="0"
	/>
<style name="controlBar_dpadbtn_vertical_style_alpha"
	alpha="1.0"
	devices="tablet.or.mobile"
	/>
<style name="controlBar_dpadbtn_vertical_style_alpha"
	alpha="0.2"
	devices="desktop"
	/>

<style name="controlBar_dpadmenu_bg_alpha"
	alpha="0.2"
	devices="desktop"
	/>
<style name="controlBar_dpadmenu_bg_alpha"
	alpha="0.5"
	devices="tablet.or.mobile"
	/>

<layer name="controlBar_dpadmenu_vertical_bg"
	url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_vertical.png"
	keep="true"
	align="bottomleft"
	x="64"
	y="118"
	edge="bottom"
	zorder="2"
	scale9grid="12|10|3|40"
	style="controlBar_dpadmenu_bg_alpha"
	visible="false"
	/>

<layer name="controlBar_dpadmenu_vertical_bg_border"
	url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_border_vertical.png"
	keep="true"
	align="bottomleft"
	x="64"
	y="118"
	edge="bottom"
	zorder="3"
	scale9grid="12|10|3|40"
	onout="controlBar_dpadvertical_onout_action();"
	onover="controlBar_dpadvertical_onover_action();"
	visible="false"
	>

  <layer name="controlBar_dpadbtn_autorotate_on"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_start_autorotation.png"
          onclick="resumeautorotation();
"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          visible="false"
          tooltip="controlBar_dpadautorotateOnTip"
          />
  <layer name="controlBar_dpadbtn_autorotate_off"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_stop_autorotation.png"
          onclick="pauseautorotation();
"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          visible="false"
          tooltip="controlBar_dpadautorotateOffTip"
          />


  <layer name="controlBar_dpadbtn_autotour_on"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_start_automatic_tour.png"
          onclick="startautotour();
"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          visible="false"
          tooltip="controlBar_dpadautotourOnTip"
          />
  <layer name="controlBar_dpadbtn_autotour_off"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_stop_automatic_tour.png"
          onclick="stopautotour();
"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          visible="false"
          tooltip="controlBar_dpadautotourOffTip"
          />

  <layer name="controlBar_dpadbtn_in"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_zoom_in.png"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          ondown="viewControlZoomIn(false);"
          onup="viewControlZoomStop();
"
          tooltip="controlBar_dpadzoomInTip"
          visible="false"
          devices="desktop"
          />

  <layer name="controlBar_dpadbtn_out"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_zoom_out.png"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          ondown="viewControlZoomOut(false);
"
          onup="viewControlZoomStop();
"
          tooltip="controlBar_dpadzoomOutTip"
          visible="false"
          devices="desktop"
          />
  <layer name="controlBar_dpadzoom_slider_bg"
          url="%FIRSTXML%/graphics/crosscornerbar/slider_bg_vertical.png"
          keep="true"
          align="bottom"
          alpha="0.2"
          visible="false"
          devices="desktop"
          >
    <layer name="controlBar_dpadzoom_slider_grip"
           keep="true"
           url="%FIRSTXML%/graphics/crosscornerbar/slider_grip_vertical.png"
           align="top"
           edge="center"
           ondown="controlBar_dpadzoom_slider_grip_ondown();"
           />
  </layer>

  <layer name="controlBar_dpadbtn_openfs"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_enter_fs.png"
          onclick="enterFullscreen();
"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          tooltip="controlBar_dpadopenFsTip"
          visible="false"
          devices="fullscreensupport"
          />
  <layer name="controlBar_dpadbtn_closefs"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_close_fs.png"
          onclick="exitFullscreen();
"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          visible="false"
          tooltip="controlBar_dpadcloseFsTip"
          devices="fullscreensupport"
          />


  <layer name="controlBar_dpadbtn_enter_vr"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_vr_mode.png"
          onclick="js(accessWebVr());
"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          tooltip="controlBar_dpadenterVRTip"
          visible="false"
          devices="html5"
          />
    <layer name="controlBar_dpadbtn_enter_vr_not"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_vr_mode_off.png"
            style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
            tooltip="controlBar_dpadenterVRNotTip"
            enabled="true"
            capture="false"
            visible="false"
            devices="html5"
            />


  <layer name="controlBar_dpadbtn_ctrlmode_move_to"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_move_to.png"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          tooltip="controlBar_dpadctrlmodeMoveTip"
          onclick="setControlModeMoveTo();
"
          visible="false"
          devices="desktop"
          />
  <layer name="controlBar_dpadbtn_ctrlmode_drag_to"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_drag_to.png"
          style="controlBar_dpadbtn_vertical_style|controlBar_dpadbtn_vertical_style_alpha"
          tooltip="controlBar_dpadctrlmodeDragTip"
          onclick="setControlModeDragTo();
"
          visible="false"
          devices="desktop"
          />


</layer>

  <action name="controlBar_dpadvertical_onout_action">
    set(layer[controlBar_dpadmenu_vertical_bg].alpha, 0.2);
    if (device.fullscreensupport,
      set(layer[controlBar_dpadbtn_openfs].alpha, 0.2);
      set(layer[controlBar_dpadbtn_closefs].alpha, 0.2);
    );
    if (device.desktop,
    set(layer[controlBar_dpadbtn_in].alpha, 0.2);
    set(layer[controlBar_dpadbtn_out].alpha, 0.2);
    set(layer[controlBar_dpadzoom_slider_bg].alpha, 0.2);
    );

    if(layer[controlBar_dpadbtn_enter_vr],
      set(layer[controlBar_dpadbtn_enter_vr].alpha, 0.2);
    );
    set(layer[controlBar_dpadbtn_autotour_off].alpha, 0.2);
    set(layer[controlBar_dpadbtn_autotour_on ].alpha, 0.2);

    set(layer[controlBar_dpadbtn_autorotate_off].alpha, 0.2);
    set(layer[controlBar_dpadbtn_autorotate_on ].alpha, 0.2);
    if (device.desktop,
      set(layer[controlBar_dpadbtn_ctrlmode_drag_to].alpha, 0.2);
      set(layer[controlBar_dpadbtn_ctrlmode_move_to].alpha, 0.2);
    );
  </action>

  <action name="controlBar_dpadvertical_onover_action">
    set(layer[controlBar_dpadmenu_vertical_bg].alpha, 1);
    if (device.fullscreensupport,
      set(layer[controlBar_dpadbtn_openfs].alpha, 1);
      set(layer[controlBar_dpadbtn_closefs].alpha, 1);
    );
    if (device.desktop,
    set(layer[controlBar_dpadbtn_in].alpha, 1);
    set(layer[controlBar_dpadbtn_out].alpha, 1);
    set(layer[controlBar_dpadzoom_slider_bg].alpha, 1);
    );

    if(layer[controlBar_dpadbtn_enter_vr],
      set(layer[controlBar_dpadbtn_enter_vr].alpha, 1);
    );
    set(layer[controlBar_dpadbtn_autotour_off].alpha, 1);
    set(layer[controlBar_dpadbtn_autotour_on ].alpha, 1);

    set(layer[controlBar_dpadbtn_autorotate_off].alpha, 1);
    set(layer[controlBar_dpadbtn_autorotate_on ].alpha, 1);
    if (device.desktop,
      set(layer[controlBar_dpadbtn_ctrlmode_drag_to].alpha, 1);
      set(layer[controlBar_dpadbtn_ctrlmode_move_to].alpha, 1);
    );
  </action>

  <action name="controlBar_dpadhorizontal_onout_action">
    set(layer[controlBar_dpadmenu_horizontal_bg].alpha, 0.2);


    set(layer[controlBar_dpadbtn_home].alpha, 0.2);
    if (scene.count GT 1,
    set(layer[controlBar_dpadbtn_prev_pano].alpha, 0.2);
    set(layer[controlBar_dpadbtn_next_pano].alpha, 0.2);
    );

    set(layer[controlBar_dpadbtn_sound_on].alpha, 0.2);
    set(layer[controlBar_dpadbtn_sound_off].alpha, 0.2);
	set(layer[controlBar_dpadVolumeBarContainer].alpha, 0.2);


 
  </action>

  <action name="controlBar_dpadhorizontal_onover_action">
    set(layer[controlBar_dpadmenu_horizontal_bg].alpha, 1);


    set(layer[controlBar_dpadbtn_home].alpha, 1);
    if (scene.count GT 1,
    set(layer[controlBar_dpadbtn_prev_pano].alpha, 1);
    set(layer[controlBar_dpadbtn_next_pano].alpha, 1);
    );

    set(layer[controlBar_dpadbtn_sound_on].alpha, 1);
    set(layer[controlBar_dpadbtn_sound_off].alpha, 1);
	set(layer[controlBar_dpadVolumeBarContainer].alpha, 1);



  </action>

  <style name="controlBar_dpadbtn_horizontal_style"
         keep="true"
         align="left"
         onhover="controlBar_dpadshowHorizontalMenuTooltip();"
         onout="hideTooltip();"
               crop="0| 0|30|30"
         onovercrop="0|30|30|30"
         ondowncrop="0|60|30|30"
         y="0"
         />
<style name="controlBar_dpadbtn_horizontal_style_alpha"
	alpha="1.0"
	devices="tablet.or.mobile"
	/>
<style name="controlBar_dpadbtn_horizontal_style_alpha"
	alpha="0.2"
	devices="desktop"
	/>

  <layer name="controlBar_dpadmenu_horizontal_bg"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_horizontal.png"
          keep="true"
          align="bottomleft"
          x="118"
          y="64"
          edge="left"
          zorder="2"
          scale9grid="10|12|40|3"
          style="controlBar_dpadmenu_bg_alpha"
          visible="false"
          />

  <layer name="controlBar_dpadmenu_horizontal_bg_border"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_border_horizontal.png"
          keep="true"
          align="bottomleft"
          x="118"
          y="64"
          edge="left"
          zorder="3"
          scale9grid="10|12|40|3"
          onout="controlBar_dpadhorizontal_onout_action();"
          onover="controlBar_dpadhorizontal_onover_action();"
          visible="false"
          >
    <layer name="controlBar_dpadbtn_home"
           url="%FIRSTXML%/graphics/crosscornerbar/btn_home.png"
           onclick="controlBar_dpadbtn_home_action();"
           style="controlBar_dpadbtn_horizontal_style|controlBar_dpadbtn_horizontal_style_alpha"
           tooltip="controlBar_dpadhomeTip"
           visible="false"
           />

    <layer name="controlBar_dpadbtn_prev_pano"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_previous_scene.png"
            onclick="loadPreviousScene();
"
            style="controlBar_dpadbtn_horizontal_style|controlBar_dpadbtn_horizontal_style_alpha"
            tooltip="controlBar_dpadprevSceneTip"
            visible="false"
            />
    <layer name="controlBar_dpadbtn_next_pano"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_next_scene.png"
            onclick="loadNextScene();
"
            style="controlBar_dpadbtn_horizontal_style|controlBar_dpadbtn_horizontal_style_alpha"
            tooltip="controlBar_dpadnextSceneTip"
            visible="false"
            />

  <layer name="controlBar_dpadbtn_sound_on"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_start_sound.png"
          onclick="playTourSounds();
"
          style="controlBar_dpadbtn_horizontal_style|controlBar_dpadbtn_horizontal_style_alpha"
          visible="false"
          tooltip="controlBar_dpadsoundsOnTip"
          />
  <layer name="controlBar_dpadbtn_sound_off"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_stop_sound.png"
          onclick="stopTourSounds();
"
          style="controlBar_dpadbtn_horizontal_style|controlBar_dpadbtn_horizontal_style_alpha"
          visible="false"
          tooltip="controlBar_dpadsoundsOffTip"
          />
	<layer name="controlBar_dpadVolumeBarContainer"
		type="container"
		width="48"
		height="15"
		keep="true"
		align="left"
		x="0"
		y="0"
		visible="false"
		style="controlBar_dpadbtn_horizontal_style_alpha"
		
		xoffset="0"
		
		bgcolor="0xa9d9d9"
		bgalpha="0.00000001"
		bgcapture="true"
		
		segmentCount="10"
		segmentWidth="0" 
		
		intervalCount="0" 
		intervalWidth="2"
		
		incrementPosX="0"
		incrementHeight="0"
		
		lightColor="0x18c4fd"
		darkColor="0x18c4fd"
		
		onclick="controlBar_dpadVolumeBarClickHandler"
	/>





  </layer>


	
	<style name="controlBar_dpadbtn_navigation_style"
		keep="true"
		onhover="controlBar_dpadshowVerticalMenuTooltip();"
		onout="hideTooltip();"
		crop="0|0|30|30"
		onovercrop="0|30|30|30"
		ondowncrop="0|60|30|30"
	/>
	<style name="controlBar_dpadbtn_navigation_style_alpha"
		alpha="1.0"
		devices="tablet.or.mobile"
	/>
	<style name="controlBar_dpadbtn_navigation_style_alpha"
		alpha="0.2"
		devices="desktop"
	/>
	<style name="controlBar_dpadbtn_navigation_style_showctrl"
		keep="true"
		onout="hideTooltip();set(alpha, 0.5);"
		onover="set(alpha, 1);"
	/>
	
	<layer name="controlBar_dpadnavigation_bg"
		url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_move.png"
		align="bottomleft"
		x="10"
		y="10"
		keep="true"
		capture="false"
		zorder="2"
		style="controlBar_dpadmenu_bg_alpha"
		visible="false"
		/>

  <layer name="controlBar_dpadnavigation_bg_border"
          url="%FIRSTXML%/graphics/crosscornerbar/btn_bg_border_move.png"
          keep="true"
          align="bottomleft"
          x="10"
          y="10"
          capture="false"
          zorder="3"
          onout="controlBar_dpadnav_onout_action();"
          onover="controlBar_dpadnav_onover_action();"
          visible="false"
          >
    <layer name="controlBar_dpadbtn_left"
            ondown="viewControlMoveLeft(false);
"
            onup="viewControlMoveHoriStop();
"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_move_left.png"
            style="controlBar_dpadbtn_navigation_style|controlBar_dpadbtn_navigation_style_alpha"
            tooltip="controlBar_dpadmoveLeftTip"
            x="5"
            y="0"
            edge="left"
            align="left"
            visible="false"
             />
    <layer name="controlBar_dpadbtn_right"
            ondown="viewControlMoveRight(false);
"
            onup="viewControlMoveHoriStop();
"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_move_right.png"
            style="controlBar_dpadbtn_navigation_style|controlBar_dpadbtn_navigation_style_alpha"
            tooltip="controlBar_dpadmoveRightTip"
            x="5"
            y="0"
            edge="right"
            align="right"
            visible="false"
             />
    <layer name="controlBar_dpadbtn_up"
            ondown="viewControlMoveUp(false);
"
            onup="viewControlMoveVertStop();
"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_move_up.png"
            style="controlBar_dpadbtn_navigation_style|controlBar_dpadbtn_navigation_style_alpha"
            tooltip="controlBar_dpadmoveUpTip"
            x="0"
            y="5"
            align="top"
            edge="top"
            visible="false"
             />
    <layer name="controlBar_dpadbtn_down"
            ondown="viewControlMoveDown(false);
"
            onup="viewControlMoveVertStop();
"
            url="%FIRSTXML%/graphics/crosscornerbar/btn_move_down.png"
            style="controlBar_dpadbtn_navigation_style|controlBar_dpadbtn_navigation_style_alpha"
            tooltip="controlBar_dpadmoveDownTip"
            x="0"
            y="5"
            edge="bottom"
            align="bottom"
            visible="false"
             />

	<layer name="controlBar_dpadbtn_hidecontrols"
		url="%FIRSTXML%/graphics/crosscornerbar/btn_hide_controls.png"
		style="controlBar_dpadbtn_navigation_style"
		onclick="controlBar_dpadhideMenuControls();hideTourControls();
"
		edge="center"
		align="center"
		tooltip="controlBar_dpadhideControlsTip"
		visible="false"
		alpha="1.0"
		/>
	<layer name="controlBar_dpadbtn_showcontrols"
		onclick="controlBar_dpadshowMenuControls();showTourControls();
"
		url="%FIRSTXML%/graphics/crosscornerbar/btn_show_controls.png"
		style="controlBar_dpadbtn_navigation_style|controlBar_dpadbtn_navigation_style_showctrl"
		align="center"
		edge="center"
		visible="false"
		alpha="0.5"
		tooltip="controlBar_dpaddisplayControlsTip"
		/>
	
</layer>

    <action name="controlBar_dpadbtn_home_action">
      hideTooltip();lookto(get(panoview.h),get(panoview.v),get(panoview.fov),smooth(100,20,50));
      if(scene[get(xml.scene)].video,
        plugin[get(videointerface_video)].seek(0);
        ifnot(plugin[get(videointerface_video)].ispaused,
          plugin[get(videointerface_video)].play();
        );
      );
    </action>

  <action name="controlBar_dpadnav_onout_action">
    set(layer[controlBar_dpadnavigation_bg].alpha, 0.2);
    set(layer[controlBar_dpadbtn_left].alpha, 0.2);
    set(layer[controlBar_dpadbtn_right].alpha, 0.2);
    set(layer[controlBar_dpadbtn_up].alpha, 0.2);
    set(layer[controlBar_dpadbtn_down].alpha, 0.2);
  </action>

  <action name="controlBar_dpadnav_onover_action">
    set(layer[controlBar_dpadnavigation_bg].alpha, 1);
    set(layer[controlBar_dpadbtn_left].alpha, 1);
    set(layer[controlBar_dpadbtn_right].alpha, 1);
    set(layer[controlBar_dpadbtn_up].alpha, 1);
    set(layer[controlBar_dpadbtn_down].alpha, 1);
  </action>


	<events name="controlBar_dpadplaystopsoundsevent" playtoursoundsevent="controlBar_dpadupdateSoundButtons();" stoptoursoundsevent="controlBar_dpadupdateSoundButtons();" keep="true"/>
	<action name="controlBar_dpadHideSoundButtons">
		set(layer[controlBar_dpadbtn_sound_off].visible, false);
		set(layer[controlBar_dpadbtn_sound_on].visible , false);
		set(layer[controlBar_dpadVolumeBarContainer].visible, false);
	</action>
	<action name="controlBar_dpadShowSoundButtons">
		if (tour_soundson == false,
			set(layer[controlBar_dpadbtn_sound_off].visible, false);
			set(layer[controlBar_dpadbtn_sound_on].visible , true);
			set(layer[controlBar_dpadVolumeBarContainer].visible, true);
			controlBar_dpadAdjustHighlightToVolume(0);
		,
			set(layer[controlBar_dpadbtn_sound_off].visible, true);
			set(layer[controlBar_dpadbtn_sound_on].visible , false);
			set(layer[controlBar_dpadVolumeBarContainer].visible, true);
			controlBar_dpadAdjustHighlightToVolume(get(tour_soundsvolume));
		);
	</action>
	<action name="controlBar_dpadupdateSoundButtons">
		if (controlBar_dpadIsOpened,
			controlBar_dpadShowSoundButtons();
		,
			controlBar_dpadHideSoundButtons();
		);
	</action>


	<events name="controlBar_dpadAutorotationEvents"
		onstartautorotation="controlBar_dpadupdateAutorotationButtons();"
		onresumeautorotation="controlBar_dpadupdateAutorotationButtons();"
		onstopautorotation="controlBar_dpadupdateAutorotationButtons();"
		onpauseautorotation="controlBar_dpadupdateAutorotationButtons();"
		keep="true"/>
	<action name="controlBar_dpadHideAutorotationButtons">
		set(layer[controlBar_dpadbtn_autorotate_off].visible, false);
		set(layer[controlBar_dpadbtn_autorotate_on].visible , false);
	</action>
	<action name="controlBar_dpadShowAutorotationButtons">
		if(autorotate.enabled == false,
			set(layer[controlBar_dpadbtn_autorotate_off].visible, false);
			set(layer[controlBar_dpadbtn_autorotate_on].visible , true);
		,
			set(layer[controlBar_dpadbtn_autorotate_off].visible, true);
			set(layer[controlBar_dpadbtn_autorotate_on].visible , false);
		);
	</action>
	<action name="controlBar_dpadupdateAutorotationButtons">
		if (controlBar_dpadIsOpened,
			controlBar_dpadShowAutorotationButtons();
		,
			controlBar_dpadHideAutorotationButtons();
		);
	</action>


	<events name="controlBar_dpadAutotourEvents"
		onstartautotour="controlBar_dpadupdateAutotourButtons();"
		onstopautotour="controlBar_dpadupdateAutotourButtons();"
		keep="true"/>
	<action name="controlBar_dpadHideAutotourButtons">
		set(layer[controlBar_dpadbtn_autotour_off].visible, false);
		set(layer[controlBar_dpadbtn_autotour_on].visible , false);
	</action>
	<action name="controlBar_dpadShowAutotourButtons">
		if (tour_autotourenabled == false,
			set(layer[controlBar_dpadbtn_autotour_off].visible, false);
			set(layer[controlBar_dpadbtn_autotour_on].visible , true);
		,
			set(layer[controlBar_dpadbtn_autotour_off].visible, true);
			set(layer[controlBar_dpadbtn_autotour_on].visible , false);
		);
	</action>
	<action name="controlBar_dpadupdateAutotourButtons">
		if (controlBar_dpadIsOpened,
			controlBar_dpadShowAutotourButtons();
		,
			controlBar_dpadHideAutotourButtons();
		);
	</action>
	

	<events name="controlBar_dpadcontrolmodechangedevent" oncontrolmodechanged="if (controlBar_dpadControlModeButtonsActivated,controlBar_dpadupdateControlModeButtons(););" onxmlcomplete="set(controlBar_dpadControlModeButtonsActivated, true);" keep="true"/>
	<action name="controlBar_dpadHideControlModeButtons">
		set(layer[controlBar_dpadbtn_ctrlmode_move_to].visible, false);
		set(layer[controlBar_dpadbtn_ctrlmode_drag_to].visible, false);
	</action>
	<action name="controlBar_dpadShowControlModeButtons">
		if (tour_controlmodemousetype == "moveto",
			set(layer[controlBar_dpadbtn_ctrlmode_drag_to].visible, true);
			set(layer[controlBar_dpadbtn_ctrlmode_move_to].visible, false);
		,
			set(layer[controlBar_dpadbtn_ctrlmode_move_to].visible, true);
			set(layer[controlBar_dpadbtn_ctrlmode_drag_to].visible, false);
		);
	</action>
	<action name="controlBar_dpadupdateControlModeButtons">
	if (device.desktop,
		if (controlBar_dpadIsOpened,
			controlBar_dpadShowControlModeButtons();
		,
			controlBar_dpadHideControlModeButtons();
		);
	,
		controlBar_dpadHideControlModeButtons();
	);
	</action>
	
  <action name="controlBar_dpadzoom_slider_grip_dragging">
    if (pressed,
      sub(dy, mouse.stagey, drag_stagey); 
      add(newy, drag_currenty, dy); 

      if(newy LT 0, set(newy, 0) );
      if(newy GT layer[controlBar_dpadzoom_slider_bg].pixelheight, copy(newy, layer[controlBar_dpadzoom_slider_bg].pixelheight));
      copy(y, newy);

      div(val, newy, layer[controlBar_dpadzoom_slider_bg].pixelheight);

      sub(fovrange, view.fovmax, view.fovmin);
      mul(newfov  , val, fovrange);
      add(newfov  , view.fovmin);
      set(view.fov, get(newfov));

      delayedcall(0, controlBar_dpadzoom_slider_grip_dragging());
    );
  </action>
  <action name="controlBar_dpadzoom_slider_grip_ondown">
    copy(drag_currenty, y);
    copy(drag_stagey, mouse.stagey);
    controlBar_dpadzoom_slider_grip_dragging();
  </action>
  <events name="controlBar_dpadzoom_slider_events" keep="true" onviewchanged="controlBar_dpadzoom_slider_update();" />
  <action name="controlBar_dpadzoom_slider_update">
    if (device.desktop,
    ifnot (layer[controlBar_dpadzoom_slider_grip].pressed,
      sub(val, view.fov, view.fovmin);
      sub(fovrange, view.fovmax, view.fovmin);
      div(val, fovrange);
      mul(newy, val, layer[controlBar_dpadzoom_slider_bg].pixelheight);
      set(layer[controlBar_dpadzoom_slider_grip].y, get(newy));
    );
    );
  </action>

	<events name="controlBar_dpadmenufullscreenchangeevent"
		onenterfullscreen="controlBar_dpadupdateFullscreenButtons();"
		onexitfullscreen="controlBar_dpadupdateFullscreenButtons();"
		keep="true"/>
	<action name="controlBar_dpadHideFullscreenButtons">
		set(layer[controlBar_dpadbtn_openfs].visible , false);
		set(layer[controlBar_dpadbtn_closefs].visible, false);
	</action>
	<action name="controlBar_dpadShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[controlBar_dpadbtn_openfs].visible , false);
				set(layer[controlBar_dpadbtn_closefs].visible, true);
			,
				set(layer[controlBar_dpadbtn_openfs].visible ,true);
				set(layer[controlBar_dpadbtn_closefs].visible,false);
			);
		,
			controlBar_dpadHideFullscreenButtons();
		);
	</action>
	<action name="controlBar_dpadupdateFullscreenButtons">
		if (controlBar_dpadIsOpened,
			controlBar_dpadShowFullscreenButtons();
		,
			controlBar_dpadHideFullscreenButtons();
		);
	</action>
	

<events name="controlBar_dpadvravailableevent"
		onvravailable="controlBar_dpadupdateVrButtonsAvailability();"
		onvrunavailable="controlBar_dpadupdateVrButtonsAvailability();"
		keep="true" devices="html5" />
	<krpano controlBar_dpadmenuvravailable="false" />
	<action name="controlBar_dpadupdateVrButtonsAvailability">
		if (tour_vrdevices,
			set(controlBar_dpadmenuvravailable, true);
		,
			set(controlBar_dpadmenuvravailable, false);
		);
		controlBar_dpadupdateVrButtons();
	</action>
	<action name="controlBar_dpadHideVrButtons">
		set(layer[controlBar_dpadbtn_enter_vr].visible, false);
		if('%1' == 'true' AND plugin[ptpvrmode],
			set(layer[controlBar_dpadbtn_enter_vr_not].visible, true);
		,
			set(layer[controlBar_dpadbtn_enter_vr_not].visible, false);
		);
	</action>
	<action name="controlBar_dpadShowVrButtons">
		if (controlBar_dpadmenuvravailable,
			set(layer[controlBar_dpadbtn_enter_vr].visible, true);
			set(layer[controlBar_dpadbtn_enter_vr_not].visible, false);
		,
			controlBar_dpadHideVrButtons(true);
		);
	</action>
	<action name="controlBar_dpadupdateVrButtons">
	if (tour_vrdevices,
		if (controlBar_dpadIsOpened,
			controlBar_dpadShowVrButtons();
		,
			controlBar_dpadHideVrButtons();
		);
	,
		if (controlBar_dpadIsOpened,
			controlBar_dpadHideVrButtons(true);
		,
			controlBar_dpadHideVrButtons();
		);
	);
	</action>



<action name="controlBar_dpadhideMenuControls">
		set(controlBar_dpadIsOpened, false);
		set(layer[controlBar_dpadnavigation_bg].visible, false);
		
			set(layer[controlBar_dpadbtn_up].visible, false);
			set(layer[controlBar_dpadbtn_down].visible, false);
			set(layer[controlBar_dpadbtn_left].visible, false);
			set(layer[controlBar_dpadbtn_right].visible, false);
		
		set(layer[controlBar_dpadnavigation_bg_border].visible, true);
		tween(layer[controlBar_dpadnavigation_bg_border].alpha, 0.5, 1);
		
		
		if(controlBar_dpadverticalheight GT 0,
			set(layer[controlBar_dpadmenu_vertical_bg].visible, false);
				set(layer[controlBar_dpadbtn_in].visible, false);
				set(layer[controlBar_dpadbtn_out].visible, false);
					set(layer[controlBar_dpadzoom_slider_bg].visible, false);


				controlBar_dpadupdateAutorotationButtons();

				controlBar_dpadupdateAutotourButtons();
				controlBar_dpadupdateVrButtons();

				controlBar_dpadupdateFullscreenButtons();
				controlBar_dpadupdateControlModeButtons();
			tween(layer[controlBar_dpadmenu_vertical_bg_border].alpha , 0, 1);
			tween(layer[controlBar_dpadmenu_vertical_bg_border].height , 0, 1, easeOutQuad, set(layer[controlBar_dpadmenu_vertical_bg_border].visible, false));
		);
		
		
		if(controlBar_dpadhorizontalwidth != 0,
			set(layer[controlBar_dpadmenu_horizontal_bg].visible, false);


				set(layer[controlBar_dpadbtn_home].visible, false);
				if (scene.count GT 1,
					set(layer[controlBar_dpadbtn_prev_pano].visible, false);
					set(layer[controlBar_dpadbtn_next_pano].visible, false);
				);

				controlBar_dpadupdateSoundButtons();



			tween(layer[controlBar_dpadmenu_horizontal_bg_border].alpha , 0, 1);
			tween(layer[controlBar_dpadmenu_horizontal_bg_border].width, 0, 1, easeOutQuad, set(layer[controlBar_dpadmenu_horizontal_bg_border].visible, false));
		);
		set(layer[controlBar_dpadbtn_showcontrols].visible, true);
		set(layer[controlBar_dpadbtn_hidecontrols].visible, false);
	</action>
	
	<action name="controlBar_dpadshowMenuControls">
	set(controlBar_dpadIsOpened, true);
    set(layer[controlBar_dpadbtn_showcontrols].visible, false);
    set(layer[controlBar_dpadbtn_hidecontrols].visible, true);
    set(layer[controlBar_dpadnavigation_bg].visible, true);

    set(layer[controlBar_dpadbtn_up].visible, true);
    set(layer[controlBar_dpadbtn_down].visible, true);
    set(layer[controlBar_dpadbtn_left].visible, true);
    set(layer[controlBar_dpadbtn_right].visible, true);

    set(layer[controlBar_dpadnavigation_bg_border].visible, true);
    tween(layer[controlBar_dpadnavigation_bg_border].alpha, 1, 1);

    
    if(controlBar_dpadverticalheight GT 0,
      set(layer[controlBar_dpadmenu_vertical_bg_border].visible, true);
      tween(layer[controlBar_dpadmenu_vertical_bg_border].alpha, 1, 1);
      tween(layer[controlBar_dpadmenu_vertical_bg_border].height, get(controlBar_dpadverticalheight), 1, easeOutQuad,
        set(layer[controlBar_dpadmenu_vertical_bg].visible, true);
        controlBar_dpadupdateFullscreenButtons();
        controlBar_dpadupdateAutorotationButtons();

        controlBar_dpadupdateAutotourButtons();
        controlBar_dpadupdateVrButtons();

        if (device.desktop,
        set(layer[controlBar_dpadbtn_in].visible, true);
        set(layer[controlBar_dpadbtn_out].visible, true);
        set(layer[controlBar_dpadzoom_slider_bg].visible, true);
        );


      );
    );

    
    if(controlBar_dpadhorizontalwidth != 0,
      set(layer[controlBar_dpadmenu_horizontal_bg_border].visible, true);
      tween(layer[controlBar_dpadmenu_horizontal_bg_border].alpha, 1, 1);
      tween(layer[controlBar_dpadmenu_horizontal_bg_border].width, get(controlBar_dpadhorizontalwidth), 1, easeOutQuad,
        set(layer[controlBar_dpadmenu_horizontal_bg].visible, true);


      set(layer[controlBar_dpadbtn_home].visible, true);
        if (scene.count GT 1,
          set(layer[controlBar_dpadbtn_prev_pano].visible, true);
          set(layer[controlBar_dpadbtn_next_pano].visible, true);
        );
        controlBar_dpadupdateControlModeButtons();

        controlBar_dpadupdateSoundButtons();





      );
    );
  </action>



  <action name="controlBar_dpadshowHorizontalMenuTooltip">
    if (tooltip !== null, showTooltip('plugin', controlBar_dpadhorizMenuTooltipStyle, bottom););
  </action>
  <action name="controlBar_dpadshowVerticalMenuTooltip">
    if (tooltip !== null, showTooltip('plugin', controlBar_dpadverticalMenuTooltipStyle, left););
  </action>

  <layer name="controlBar_dpadhorizMenuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	background="true"
	backgroundcolor="0x0ab1ba"
	backgroundalpha="1"
	border="true"
	borderwidth="2.0"
	bordercolor="0xbafefd"
	borderalpha="1"
	css="color:#bafefd;font-family:Arial;font-size:12px;text-align:left;"
	height="20"
	autoheight="true"
	autowidth="auto"
	selectable="false"
	zorder="0"
	padding="2"
	xoffset="0"
	visible="false"
	html=""
	edge="bottom"
	yoffset="-10"
  />
  <layer name="controlBar_dpadverticalMenuTooltipStyle"
	keep="true"
	enabled="false"
	capture="false"
	url="%FIRSTXML%/graphics/textfield.swf"
	align="center"
	background="true"
	backgroundcolor="0x0ab1ba"
	backgroundalpha="1"
	border="true"
	borderwidth="2.0"
	bordercolor="0xbafefd"
	borderalpha="1"
	css="color:#bafefd;font-family:Arial;font-size:12px;text-align:left;"
	height="20"
	autoheight="true"
	autowidth="auto"
	selectable="false"
	zorder="0"
	padding="2"
	yoffset="0"
	visible="false"
	html=""
	edge="left"
	xoffset="10"
  />







	<!-- WebVR plugin for VR availability tests -->

	<plugin name="ptpvrmode" devices="html5" keep="true"
		url="%FIRSTXML%/graphics/webvr.js"
		mobilevr_support="true"
		mobilevr_fake_support="true"
		vr_cursor=""
		vr_cursor_enabled="false"
		onavailable="delayedcall(1, checkVrAvailability(););"
		onunavailable="checkVrUnavailable();"
		/>
	<action name="checkVrAvailability">
		if(plugin[ptpvrmode],
			if (plugin[ptpvrmode].isavailable,
				set(tour_vrdevices, true);
				events.dispatch(onvravailable);
			,
				set(tour_vrdevices, false);
			);
		,
			checkVrUnavailable();
		);
	</action>
	<action name="checkVrUnavailable">
		set(tour_vrdevices, false);
		events.dispatch(onvrunavailable);
	</action>
  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>


  <!-- Sounds Management -->
  <plugin name="soundinterface"
          preload="true"
          url="%SWFPATH%/graphics/soundinterface.swf"
          alturl="%FIRSTXML%/graphics/soundinterface.js"
          rootpath="%$videos_sounds_path%/sounds"
          backgroundsound=""
          backgroundsoundloops="0"
          bgsound="false"
          bgsoundpaused="false"
          bgsoundloopended="false"
          volumeinitialized="false"
          started="true"
          keep="true"/>
  <events name="soundmanagementevents"
          onnewpano="if(plugin[soundinterface].started,playbackgroundsound(););"
          onxmlcomplete="soundinterfaceonxmlcomplete();"
          keep="true"/>
  <action name="soundinterfaceonxmlcomplete">
    ifnot(plugin[soundinterface].volumeinitialized,
      div(plugin[soundinterface].volume, tour_soundsvolume, 100);
      set(plugin[soundinterface].volumeinitialized,true);
    );
  </action>
  <action name="playsound3Dwhenpossible">
    set(really_play_sound, true);
    if (tour_current_played_sound,
      if (%1 == tour_current_played_sound,
        delete(tour_current_played_sound);
        set(tour_current_played_sound_state, 0);
        delete(tour_current_played_sound_paused);
        stopsound(%1);
        set(really_play_sound, false);
        if(%4,
          delete(tour_current_played_sound_pausesound);
          resumeTourSoundsActions(true,true,true,true,true);
        );
      );
    );
    if (really_play_sound,
      if (tour_current_played_sound,
        stopsound(get(tour_current_played_sound));

        ifnot(%4,
          if(tour_current_played_sound_pausesound,
            delete(tour_current_played_sound_pausesound);
            resumeTourSoundsActions(true,true,true,true,true);
          );
        );
      );
      if(%4,
        set(tour_current_played_sound_pausesound, true);
        pauseTourSoundsActions(true,false,true,true,true);
      );
      set(tour_current_played_sound, %1);
      if(tour_current_played_video,
        set(tour_current_played_sound_state, 2);
      ,
        set(tour_current_played_sound_state, 1);
      );
      set(tour_current_played_sound_paused, false);
      if (%3,
        if (device.flash,
          div(volume, tour_soundsvolume, 100);
          if(%9 != null,
            playsound3D(%1,%2,%5,%6,%7,get(volume),%8,stopsound3Dwhenpossible(%1,%4));
          ,
            playsound3D(%1,%2,%5,%6,%7,get(volume),%8);
          );
        ,
          if(%9 != null,
            playsound(%1,%2,%8,stopsound3Dwhenpossible(%1,%4));
          ,
            playsound(%1,%2,%8);
          );
        );
      ,
        if(%6 != null,
          playsound(%1,%2,%5,stopsound3Dwhenpossible(%1,%4));
        ,
          playsound(%1,%2,%5);
        );
      );

      ifnot(tour_soundson,
        set(tour_current_played_sound_paused, true);
        pausesound(%1);
      );
    );
  </action>
  <action name="stopsound3Dwhenpossible">
    if (%1 == tour_current_played_sound,
      delete(tour_current_played_sound);
      set(tour_current_played_sound_state, 0);
      delete(tour_current_played_sound_paused);

      ifnot(device.safari,
        stopsound(%1);
      );
      if(%2,
        delete(tour_current_played_sound_pausesound);
        resumeTourSoundsActions(true,true,true,true,true);
      );
    );
  </action>
  <action name="playbackgroundsound">
  if(playsound,
    if (xml.scene,
      if (scene[get(xml.scene)].backgroundsound,
        if (plugin[soundinterface].backgroundsound != scene[get(xml.scene)].backgroundsound,
          copy(plugin[soundinterface].backgroundsound, scene[get(xml.scene)].backgroundsound);
          copy(plugin[soundinterface].backgroundsoundloops, scene[get(xml.scene)].backgroundsoundloops);
          if (tour_soundson,
            set(plugin[soundinterface].bgsound, true);
            set(plugin[soundinterface].bgsoundpaused, false);
            set(plugin[soundinterface].bgsoundloopended, false);
            if(plugin[soundinterface].backgroundsoundloops GT 0,
              playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops), stopbackgroundsoundoncomplete());
            ,
              playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops));
            );
           ,
            set(plugin[soundinterface].bgsound, false);
          );
        ,
          if (tour_soundson,
            if((plugin[soundinterface].bgsoundpaused == true AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              resumesound(bgsoundname);
              set(plugin[soundinterface].bgsoundpaused, false);
            );
          ,
            set(plugin[soundinterface].bgsound, false);
          );
        );
      );
    );
  ,
    delayedcall(0.2, playbackgroundsound());
  );
  </action>
  <action name="stopbackgroundsoundoncomplete">
    if (plugin[soundinterface].backgroundsound,
    if (plugin[soundinterface].backgroundsoundloops GT 0,

      set(plugin[soundinterface].backgroundsoundloops, 0);
      set(plugin[soundinterface].bgsound, false);
      set(plugin[soundinterface].bgsoundpaused, false);
      set(plugin[soundinterface].bgsoundloopended, true);
    );
    );
  </action>
  <action name="resetbackgroundsoundifneeded">
    if (xml.scene,
      if (scene[get(xml.scene)].backgroundsound != scene[%1].backgroundsound,
        if(plugin[soundinterface].backgroundsound,
          stopsound(bgsoundname);
        );
        set(plugin[soundinterface].backgroundsound, "");
        set(plugin[soundinterface].backgroundsoundloops, 0);
        set(plugin[soundinterface].bgsound, false);
        set(plugin[soundinterface].bgsoundpaused, false);
        set(plugin[soundinterface].bgsoundloopended, false);
      );
    );
  </action>
  <action name="pausebackgroundsound">
    if(plugin[soundinterface].backgroundsound,
      if (plugin[soundinterface].bgsound,
        if(plugin[soundinterface].bgsoundpaused == false AND plugin[soundinterface].bgsoundloopended == false,
          pausesound(bgsoundname);
          set(plugin[soundinterface].bgsoundpaused, true);
        );
      );
    );
    
  </action>
  <action name="resumebackgroundsound">
    set(bgSoundOnResume, true);
    set(forceBgSoundOnResume, true);
    if(layer[displayedStandardVideo],
    if(layer[displayedStandardVideo].pausebgsound AND tour_current_played_video,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    ););
    if(layer[webvideodisplay_player],
    if(layer[webvideodisplay_player].pausebgsound AND tour_current_played_web_video,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    ););
    if(tour_current_played_sound_pausesound AND tour_current_played_sound,
      set(bgSoundOnResume, false);
    );
    ifnot(plugin[soundinterface].backgroundsound AND scene[get(xml.scene)].backgroundsound,
      set(bgSoundOnResume, false);
    );
    if(videospots_playing GT 0,
      set(bgSoundOnResume, false);
      set(forceBgSoundOnResume, false);
    );
    if(bgSoundOnResume,
      if (plugin[soundinterface].backgroundsound,
        if (tour_soundson,
          if (plugin[soundinterface].bgsound AND plugin[soundinterface].bgsoundloopended == false,
            if((plugin[soundinterface].bgsoundpaused == true AND scene[get(xml.scene)].video == false) OR (scene[get(xml.scene)].video == true AND scene[get(xml.scene)].scenevideomute == true),
              resumesound(bgsoundname);
              set(plugin[soundinterface].bgsoundpaused, false);
            );
          ,
            set(plugin[soundinterface].bgsound, true);
            set(plugin[soundinterface].bgsoundpaused, false);
            set(plugin[soundinterface].bgsoundloopended, false);
            if(plugin[soundinterface].backgroundsoundloops GT 0,
              playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops), stopbackgroundsoundoncomplete());
            ,
              playsound(bgsoundname, get(plugin[soundinterface].backgroundsound), get(plugin[soundinterface].backgroundsoundloops));
            );
          );
        );
      );
      
    ,
      if(forceBgSoundOnResume,
        playbackgroundsound();
        
      );
    );
  </action>
  <action name="preloadSounds">
    preloadsound("explore_detroit_s_most_magnificent_churches_-_uav_aerial_video_footage.mp3");
  </action>

  <action name="play3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, playpanolocalsounds();););
  </action>
  <action name="stop3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, stoppanolocalsounds();););
  </action>
  <action name="resume3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, 
      set(kill3dSoundOnResume, true);
      if(layer[displayedStandardVideo],
      if(layer[displayedStandardVideo].pausebgsound,
      if(tour_current_played_video,
        set(kill3dSoundOnResume, false);
      );););
      if(layer[webvideodisplay_player],
      if(layer[webvideodisplay_player].pausebgsound,
      if(tour_current_played_web_video,
        set(kill3dSoundOnResume, false);
      );););
      if(tour_current_played_sound_pausesound,
      if(tour_current_played_sound,
        set(kill3dSoundOnResume, false);
      ););
      if(kill3dSoundOnResume,
        resumepanolocalsounds();
      );
    ););
  </action>
  <action name="pause3DLocalSounds">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, pausepanolocalsounds();););
  </action>
  <action name="set3DLocalSoundsVolume">
    if (xml.scene, if (scene[get(xml.scene)].haslocalsounds, setpanolocalsoundsvolume();););
  </action>
  <action name="playTourSounds">
    set(tour_soundson, true);events.dispatch(playtoursoundsevent);
    resumeTourSoundsActions(true,true,true,true,true);
  </action>
  <action name="stopTourSounds">
    set(tour_soundson, false);events.dispatch(stoptoursoundsevent);
    pauseTourSoundsActions(true,true,true,true,true);
  </action>
  <action name="setTourSoundsVolume">
    set(tour_soundsvolume, %1);events.dispatch(changetoursoundsevent);
    div(volume, tour_soundsvolume, 100);
    set(plugin[soundinterface].volume, get(volume));
    set3DLocalSoundsVolume();
  </action>
  <action name="playTourSoundsActions">
    if(%1,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
        play3DLocalSounds();
        );
      );
    );
    if(%2,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
          resumebackgroundsound();
        );
      );
    );
  </action>
  <action name="stopTourSoundsActions">
    if(%1,
      stop3DLocalSounds();
    );
    if(%2,
      stopSoundActionsSounds();
    );
    if(%3,
      stopVideoActionsSounds();
    );
    if(%4,
      pausebackgroundsound();
    );
  </action>
  <action name="resumeTourSoundsActions">
    if(%1,
      if(plugin[soundinterface],
        if(plugin[soundinterface].started,
        resume3DLocalSounds();
        );
      );
    );
    if(%2,
      resumeSoundActionsSounds();
    );
    if(%3,
      resumeVideoActionsSounds();
    );
    if(%4,
      if(%5,
        if(plugin[soundinterface],
          if(plugin[soundinterface].started,
            resumebackgroundsound();
          );
        );
      ,
        pausebackgroundsound();
      );
    );
  </action>
  <action name="pauseTourSoundsActions">
    if(%1,
      pause3DLocalSounds();
    );
    if(%2,
      pauseSoundActionsSounds();
    );
    if(%3,
      pauseVideoActionsSounds();
    );
    if(%4,
      if(%5,
        pausebackgroundsound();
      ,
        if(plugin[soundinterface],
          if(plugin[soundinterface].started,
            resumebackgroundsound();
          );
        );
      );
    );
  </action>
  <action name="stopSoundActionsSounds">
    if (tour_current_played_sound,
      delete(tour_current_played_sound_paused);
      stopsound(get(tour_current_played_sound));
      delete(tour_current_played_sound);
      set(tour_current_played_sound_state, 0);
    );
  </action>
  <action name="stopVideoActionsSounds">
    if(tour_current_played_video,
      if(layer[displayedStandardVideo],
        layer[displayedStandardVideo].stop();
        removelayer(displayedStandardVideo);
        if(layer[displayedStandardVideoOverlayButton], removelayer(displayedStandardVideoOverlayButton); );
        if(layer[displayedStandardVideoOverlay], removelayer(displayedStandardVideoOverlay); );
        delete(tour_current_played_video);
        set(tour_current_played_video_state, 0);
      );
    );
    if(tour_current_played_web_video,
      displayWebVideoObjectClose();
    );
  </action>
  <action name="resumeSoundActionsSounds">
    if (tour_current_played_sound,
      set(resumeSoundActionsVerification, true);
      if(tour_current_played_video,
        if(tour_current_played_sound_state LT tour_current_played_video_state,
          set(resumeSoundActionsVerification, false);
        );
      );
      if(resumeSoundActionsVerification,
        if (tour_soundson,
          if(tour_current_played_sound_paused,
            set(tour_current_played_sound_paused, false);
            resumesound(get(tour_current_played_sound));
          );
        );
      );
    );
  </action>
  <action name="resumeVideoActionsSounds">
    if(tour_current_played_video,
      set(resumeVideoActionsVerification, true);
      if(tour_current_played_sound,
        if(tour_current_played_video_state LT tour_current_played_sound_state,
          set(resumeVideoActionsVerification, false);
        );
      );
      if(resumeVideoActionsVerification,
        if (tour_soundson,
          div(volume, tour_soundsvolume, 100);
          if(device.flash OR (device.webgl AND !device.ios),
            set(layer[displayedStandardVideo].volume, get(volume));
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.startVideosSounds(get(volume)));
            );
          );
        ,
          if(device.flash OR (device.webgl AND !device.ios),
            set(layer[displayedStandardVideo].volume, 0);
          ,
            ifnot(device.ios,
              js(kpanotour.Sounds.stopVideosSounds());
            );
          );
        );
      );
    );
  </action>
  <action name="pauseSoundActionsSounds">
    if (tour_current_played_sound,
      ifnot(tour_current_played_sound_paused,
        set(tour_current_played_sound_paused, true);
        pausesound(get(tour_current_played_sound));
      );
    );
  </action>
  <action name="pauseVideoActionsSounds">
    if(tour_current_played_video,
      if(device.flash OR (device.webgl AND !device.ios),
        set(layer[displayedStandardVideo].volume, 0);
      ,
        ifnot(device.ios,
          js(kpanotour.Sounds.stopVideosSounds());
        );
      );
    );
  </action>

<action name="viewControlZoomIn">
	if(%1,
		if(%2,
			if(%2 LT view.fovmin,
				zoomto(get(view.fovmin));
			,
				if(%2 LT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, -1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, -1);
	);
</action>
<action name="viewControlZoomOut">
	if(%1,
		if(%2,
			if(%2 GT view.fovmax,
				zoomto(get(view.fovmax));
			,
				if(%2 GT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, +1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, +1);
	);
</action>
<action name="viewControlZoomStop">
	set(fov_moveforce, 0);
</action>

<action name="viewControlMoveUp">
	if(%1,
		if(%2,
			set(isfullvertical, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewvfov, panoview.vmax, panoview.vmin);
				if (viewvfov == 180,
					set(isfullvertical, true);
				);
			);
			if(isfullvertical == false AND calc(view.vlookat-%2) LT view.vlookatmin,
				moveto(get(view.hlookat), get(view.vlookatmin));
			,
				moveto(get(view.hlookat), calc(view.vlookat-%2));
			);
		,
			set(vlookat_moveforce, -1);
			delayedcall(0.1, viewControlMoveVertStop());
		);
	,
		set(vlookat_moveforce, -1);
	);
</action>
<action name="viewControlMoveDown">
	if(%1,
		if(%2,
			set(isfullvertical, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewvfov, panoview.vmax, panoview.vmin);
				if (viewvfov == 180,
					set(isfullvertical, true);
				);
			);
			if(sceneisfull360 == false AND calc(view.vlookat+%2) GT view.vlookatmax,
				moveto(get(view.hlookat), get(view.vlookatmax));
			,
				moveto(get(view.hlookat), calc(view.vlookat+%2));
			);
		,
			set(vlookat_moveforce, +1);
			delayedcall(0.1, viewControlMoveVertStop());
		);
	,
		set(vlookat_moveforce, +1);
	);
</action>
<action name="viewControlMoveLeft">
	if(%1,
		if(%2,
			set(isfullhorizontal, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewhfov, panoview.hmax, panoview.hmin);
				if (viewhfov == 360,
					set(isfullhorizontal, true);
				);
			);
			if(isfullhorizontal == false AND calc(view.hlookat-%2) LT view.hlookatmin,
				moveto(get(view.hlookatmin), get(view.vlookat));
			,
				moveto(calc(view.hlookat-%2), get(view.vlookat));
			);
		,
			set(hlookat_moveforce, -1);
			delayedcall(0.1, viewControlMoveHoriStop());
		);
	,
		set(hlookat_moveforce, -1);
	);
</action>
<action name="viewControlMoveRight">
	if(%1,
		if(%2,
			set(isfullhorizontal, false);
			ifnot(scene[get(xml.scene)].planar,
				sub(viewhfov, panoview.hmax, panoview.hmin);
				if (viewhfov == 360,
					set(isfullhorizontal, true);
				);
			);
			if(isfullhorizontal == false AND calc(view.hlookat+%2) GT view.hlookatmax,
				moveto(get(view.hlookatmax), get(view.vlookat));
			,
				moveto(calc(view.hlookat+%2), get(view.vlookat));
			);
		,
			set(hlookat_moveforce, +1);
			delayedcall(0.1, viewControlMoveHoriStop());
			
		);
	,
		set(hlookat_moveforce, +1);
	);
</action>
<action name="viewControlMoveHoriStop">
	set(hlookat_moveforce, 0);
</action>
<action name="viewControlMoveVertStop">
	set(vlookat_moveforce, 0);
</action>

  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);set(fullscreen,false);</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);set(fullscreen,true);</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>

</krpano>